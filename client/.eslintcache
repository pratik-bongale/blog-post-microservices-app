[{"/home/pratik/Desktop/learnings/microservices/blog-post-microservices-app/client/src/index.js":"1","/home/pratik/Desktop/learnings/microservices/blog-post-microservices-app/client/src/App.js":"2","/home/pratik/Desktop/learnings/microservices/blog-post-microservices-app/client/src/PostCreate.js":"3","/home/pratik/Desktop/learnings/microservices/blog-post-microservices-app/client/src/PostList.js":"4","/home/pratik/Desktop/learnings/microservices/blog-post-microservices-app/client/src/CommentCreate.js":"5","/home/pratik/Desktop/learnings/microservices/blog-post-microservices-app/client/src/CommentList.js":"6"},{"size":146,"mtime":1609808011685,"results":"7","hashOfConfig":"8"},{"size":294,"mtime":1609897276888,"results":"9","hashOfConfig":"8"},{"size":951,"mtime":1610236701000,"results":"10","hashOfConfig":"8"},{"size":1974,"mtime":1610330478937,"results":"11","hashOfConfig":"8"},{"size":1068,"mtime":1610237220323,"results":"12","hashOfConfig":"8"},{"size":1423,"mtime":1610330625600,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"16551q4",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/pratik/Desktop/learnings/microservices/blog-post-microservices-app/client/src/index.js",[],["30","31"],"/home/pratik/Desktop/learnings/microservices/blog-post-microservices-app/client/src/App.js",["32"],"import React from \"react\";\nimport PostCreate from \"./PostCreate\";\nimport PostList from \"./PostList\";\n\nexport default () => {\n    return <div className=\"container\">\n        <h1>Create Post</h1>\n        <PostCreate />\n        <hr />\n        <h1>Posts List</h1>\n        <PostList />\n    </div>;\n};","/home/pratik/Desktop/learnings/microservices/blog-post-microservices-app/client/src/PostCreate.js",["33"],"import React, { useState } from 'react';\nimport Axios from 'axios';\n\n\nexport default () => {\n\n    const [title, setTitle] = useState('')  // input: initialState, setTitle will reset the control bound to title to initialState\n\n    const onSubmit = async (event) => {\n        // we want to send the values to our post service when user submits the title\n        event.preventDefault();\n\n        await Axios.post(\"http://localhost:4000/posts\", {title}); //send title in the body of post request\n\n        setTitle('');\n    }\n\n    return (\n        <div>\n            <form onSubmit={onSubmit}>\n                <div className=\"form-group\">\n                    <label>Title</label>\n                    <input value={title} onChange={e => setTitle(e.target.value)} className=\"form-control\" />\n                </div>\n                <button className=\"btn btn-primary\" style={{marginTop:'20px'}}>Post</button>\n            </form>       \n        </div>\n    );\n};","/home/pratik/Desktop/learnings/microservices/blog-post-microservices-app/client/src/PostList.js",["34"],"/home/pratik/Desktop/learnings/microservices/blog-post-microservices-app/client/src/CommentCreate.js",["35"],"// User should be able to submit a comment in an input box and we should provide a button for that\n// so we need a form with input box and a submit button\n// each comment is associated with some post\n\nimport React, { useState } from \"react\";\nimport Axios from \"axios\";\n\nexport default ({ postId }) => {\n\n    const [content, setContent] = useState('')\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n\n        // template strings: theyâ€™re a nice-looking, convenient way to plug JavaScript values into a string.\n        await Axios.post(`http://localhost:4001/posts/${postId}/comments`, { content });\n\n        setContent('');\n    }\n\n    return (\n        <div>\n            <form onSubmit={onSubmit}>\n                <div className=\"form-group\" >\n                    <label>Comment</label>\n                    <input value={content} onChange={e => setContent(e.target.value)} className=\"form-control\"></input>\n                </div>\n                <button className=\"btn btn-primary\">Comment</button>\n            </form>\n        </div>\n    );\n};","/home/pratik/Desktop/learnings/microservices/blog-post-microservices-app/client/src/CommentList.js",["36"],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":5,"column":1,"nodeType":"43","endLine":13,"endColumn":3},{"ruleId":"41","severity":1,"message":"42","line":5,"column":1,"nodeType":"43","endLine":29,"endColumn":3},{"ruleId":"41","severity":1,"message":"42","line":6,"column":1,"nodeType":"43","endLine":46,"endColumn":3},{"ruleId":"41","severity":1,"message":"42","line":8,"column":1,"nodeType":"43","endLine":32,"endColumn":3},{"ruleId":"41","severity":1,"message":"42","line":37,"column":1,"nodeType":"43","endLine":51,"endColumn":3},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]