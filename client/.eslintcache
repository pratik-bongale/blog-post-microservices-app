[{"/home/pratik/Desktop/learnings/microservices/blog-post-microservices-app/client/src/index.js":"1","/home/pratik/Desktop/learnings/microservices/blog-post-microservices-app/client/src/App.js":"2","/home/pratik/Desktop/learnings/microservices/blog-post-microservices-app/client/src/PostCreate.js":"3","/home/pratik/Desktop/learnings/microservices/blog-post-microservices-app/client/src/PostList.js":"4","/home/pratik/Desktop/learnings/microservices/blog-post-microservices-app/client/src/CommentCreate.js":"5","/home/pratik/Desktop/learnings/microservices/blog-post-microservices-app/client/src/CommentList.js":"6"},{"size":146,"mtime":1609808011685,"results":"7","hashOfConfig":"8"},{"size":294,"mtime":1609897276888,"results":"9","hashOfConfig":"8"},{"size":951,"mtime":1610236701000,"results":"10","hashOfConfig":"8"},{"size":1974,"mtime":1610330478937,"results":"11","hashOfConfig":"8"},{"size":1068,"mtime":1610237220323,"results":"12","hashOfConfig":"8"},{"size":1735,"mtime":1610590294585,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"16551q4",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"16"},"/home/pratik/Desktop/learnings/microservices/blog-post-microservices-app/client/src/index.js",[],["33","34"],"/home/pratik/Desktop/learnings/microservices/blog-post-microservices-app/client/src/App.js",["35"],"import React from \"react\";\nimport PostCreate from \"./PostCreate\";\nimport PostList from \"./PostList\";\n\nexport default () => {\n    return <div className=\"container\">\n        <h1>Create Post</h1>\n        <PostCreate />\n        <hr />\n        <h1>Posts List</h1>\n        <PostList />\n    </div>;\n};","/home/pratik/Desktop/learnings/microservices/blog-post-microservices-app/client/src/PostCreate.js",["36"],"import React, { useState } from 'react';\nimport Axios from 'axios';\n\n\nexport default () => {\n\n    const [title, setTitle] = useState('')  // input: initialState, setTitle will reset the control bound to title to initialState\n\n    const onSubmit = async (event) => {\n        // we want to send the values to our post service when user submits the title\n        event.preventDefault();\n\n        await Axios.post(\"http://localhost:4000/posts\", {title}); //send title in the body of post request\n\n        setTitle('');\n    }\n\n    return (\n        <div>\n            <form onSubmit={onSubmit}>\n                <div className=\"form-group\">\n                    <label>Title</label>\n                    <input value={title} onChange={e => setTitle(e.target.value)} className=\"form-control\" />\n                </div>\n                <button className=\"btn btn-primary\" style={{marginTop:'20px'}}>Post</button>\n            </form>       \n        </div>\n    );\n};","/home/pratik/Desktop/learnings/microservices/blog-post-microservices-app/client/src/PostList.js",["37"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport CommentCreate from './CommentCreate'\nimport CommentList from './CommentList'\n\nexport default () => {\n\n    const [posts, setPosts] = useState({});\n\n    const fetchPosts = async () => {\n        //change this from reaching out to PostService(4000) to Query Service(4002)\n        const allPosts = await axios.get('http://localhost:4002/posts');\n        setPosts(allPosts.data);\n    };\n\n\n    // this is a side effect of render.. whenever this component is rendered the func provided here will be run\n    // used in logging, clean up, manual DOM mutations, network requests etc\n    useEffect(() => {\n        fetchPosts();   // our network request\n    }, []); // the empty array tells React that your effect doesn’t depend on any values from props or state, so it never needs to re-run.\n    // you can also pass all the state variables instead of the empty array.. this tells react that if my variable changes, run the func\n\n    // console.log(posts);  // looks good\n\n    // posts is a JS object, Object.values will turn it into an array of objects\n    // once we have the Query Service working we should populate the commentList using that service instead of the Comment Service\n    const renderedPosts = Object.values(posts).map(post => {\n        return (<div className=\"card\" \n                    style={{width: '30%', marginBottom: '20px'}}\n                    key={post.postId}    \n                >\n                    <div className=\"card-body\">\n                        <h3>{post.title}</h3>\n                        {/* <CommentList postId={post.postId} />     */}\n                        <CommentList comments={post.comments} />\n                        <CommentCreate postId={post.postId} />\n                    </div>\n                </div>);\n        });\n\n    return <div className=\"d-flex flex-row flex-wrap justify-content-between\">\n        {renderedPosts}\n    </div>;\n        \n};\n\n","/home/pratik/Desktop/learnings/microservices/blog-post-microservices-app/client/src/CommentCreate.js",["38"],"// User should be able to submit a comment in an input box and we should provide a button for that\n// so we need a form with input box and a submit button\n// each comment is associated with some post\n\nimport React, { useState } from \"react\";\nimport Axios from \"axios\";\n\nexport default ({ postId }) => {\n\n    const [content, setContent] = useState('')\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n\n        // template strings: they’re a nice-looking, convenient way to plug JavaScript values into a string.\n        await Axios.post(`http://localhost:4001/posts/${postId}/comments`, { content });\n\n        setContent('');\n    }\n\n    return (\n        <div>\n            <form onSubmit={onSubmit}>\n                <div className=\"form-group\" >\n                    <label>Comment</label>\n                    <input value={content} onChange={e => setContent(e.target.value)} className=\"form-control\"></input>\n                </div>\n                <button className=\"btn btn-primary\">Comment</button>\n            </form>\n        </div>\n    );\n};",["39","40"],"/home/pratik/Desktop/learnings/microservices/blog-post-microservices-app/client/src/CommentList.js",["41"],"// A lot of code changes here once we have the Query Service to serve the comments associated with a post\n// so commenting out the old code for maintaining history\n// import React, { useState, useEffect } from \"react\";\n// import Axios from \"axios\";\n\n// export default ( { postId } ) => {\n\n//     const [commentList, setCommentList] = useState([]);\n\n//     // get all comments into comment list\n//     const fetchComments = async () => {\n//         const comments = await Axios.get(`http://localhost:4001/posts/${postId}/comments`);\n//         setCommentList(comments.data);\n//     };\n\n//     // call fetchComments using effect, we want to call it only once, whenever this component is rendered it will be called\n//     useEffect(() => {\n//         fetchComments();\n//     }, []);\n\n//     const renderedComments = commentList.map( comment => {\n//         return <li key={comment.id}>{comment.content}</li>;\n//     });\n\n//     return (\n//     <div>\n//         <ul>\n//             {renderedComments}\n//         </ul>\n//     </div>\n//     );\n// };\n\n\nimport React from \"react\";\n\nexport default ( { comments } ) => {\n    const commentList = comments;   // list of comments associated with the post\n\n    const renderedComments = commentList.map( comment => {\n        let content = \"\";\n\n        if(comment.status === \"approved\") {\n            content = comment.content;\n        } else if(comment.status === \"rejected\") {\n            content = \"Comment removed by admin\";\n        } else if(comment.status === \"pending\") {\n            content = \"Waiting for moderation\";\n        }\n\n        return <li key={comment.id}>{content}</li>;\n    });\n\n    return (\n    <div>\n        <ul>\n            {renderedComments}\n        </ul>\n    </div>\n    );\n};\n",{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":5,"column":1,"nodeType":"48","endLine":13,"endColumn":3},{"ruleId":"46","severity":1,"message":"47","line":5,"column":1,"nodeType":"48","endLine":29,"endColumn":3},{"ruleId":"46","severity":1,"message":"47","line":6,"column":1,"nodeType":"48","endLine":46,"endColumn":3},{"ruleId":"46","severity":1,"message":"47","line":8,"column":1,"nodeType":"48","endLine":32,"endColumn":3},{"ruleId":"42","replacedBy":"49"},{"ruleId":"44","replacedBy":"50"},{"ruleId":"46","severity":1,"message":"47","line":37,"column":1,"nodeType":"48","endLine":61,"endColumn":3},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["51"],["52"],"no-global-assign","no-unsafe-negation"]